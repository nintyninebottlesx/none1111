
#include <zephyr/device.h>
#include <zephyr/drivers/gpio.h>
#include <zephyr/drivers/sensor.h>
#include <zephyr/irq.h>
#include <zephyr/logging/log.h>


#include <stdint.h>
#include "ads1231.h"
#include "ads1231_misc.h"

#define ADC_CONTEXT_USES_KERNEL_TIMER 1
#include "adc_context.h"

#define DT_DRV_COMPAT ti_ads1231

LOG_MODULE_REGISTER(ADS1231, CONFIG_ADC_LOG_LEVEL);








void ADS1231_init(void) {
    ADS1231_initBus();
    ADS1231_enterStandByMode();
}

int32_t ADS1231_getData(void) {
    ADS1231_leaveStandByMode();
    uint32_t data;
    data = ADS1231_getBits();
    ADS1231_enterStandByMode();
    return convertTwosToOnesComplement(data);
}







#if CONFIG_ADC_ASYNC
static void ads1231_acquisition_thread(struct device *dev)
{
	while (true) {
		ads1119_adc_perform_read(dev);
	}
}
#endif

static int ads1231_init(const struct device *dev)
{
	int rc;
	uint8_t status;
	const struct ads1231_config *config = dev->config;
	struct ads1231_data *data = dev->data;

	adc_context_init(&data->ctx);

	k_sem_init(&data->acq_sem, 0, 1);

	if (!device_is_ready(config->bus.bus)) {
		return -ENODEV;
	}

	rc = ads1231_read_reg(dev, ADS1231_REG_STATUS, &status);
	if (rc) {
		LOG_ERR("Could not get %s status", dev->name);
		return rc;
	}



/**
 * @brief Set HX711 attributes.
 *
 * @param dev Pointer to the hx711 device structure
 * @param chan Channel to set.
 *             Supported channels :
 *               HX711_SENSOR_CHAN_WEIGHT
 * @param attr Attribute to change.
 *             Supported attributes :
 *               SENSOR_ATTR_SAMPLING_FREQUENCY
 *               SENSOR_ATTR_OFFSET
 *               HX711_SENSOR_ATTR_SLOPE
 *               HX711_SENSOR_ATTR_GAIN
 * @param val   Value to set.
 * @retval 0 on success
 * @retval -ENOTSUP if an invalid attribute is given
 *
 */
 /*
static int hx711_attr_set(const struct device *dev, enum sensor_channel chan,
			  enum sensor_attribute attr, const struct sensor_value *val)
{
	int ret = 0;
	int hx711_attr = (int)attr;
	struct hx711_data *data = dev->data;

	switch (hx711_attr) {

	case SENSOR_ATTR_OFFSET:
		hx711_attr_set_offset(data, val);
		LOG_DBG("Attribute OFFSET set to %d\n", data->offset);
		return ret;
	case HX711_SENSOR_ATTR_SLOPE:
		hx711_attr_set_slope(data, val);
		LOG_DBG("Attribute SLOPE set to %d.%d\n", data->slope.val1, data->slope.val2);
		return ret;
	case HX711_SENSOR_ATTR_GAIN:
		ret = hx711_attr_set_gain(dev, val);
		if (ret == 0) {
			LOG_DBG("Attribute GAIN set to %d\n", data->gain);
		}
		return ret;
	default:
		return -ENOTSUP;
	}
}


static const struct sensor_driver_api hx711_api = {
	.sample_fetch = hx711_sample_fetch,
	.channel_get = hx711_channel_get,
	.attr_set = hx711_attr_set,
};
*/

#if CONFIG_ADC_ASYNC
	const k_tid_t tid =
		k_thread_create(&data->thread, config->stack,
				CONFIG_ADC_ADS1231_ACQUISITION_THREAD_STACK_SIZE,
				(k_thread_entry_t)ads1231_acquisition_thread,
				(void *)dev, NULL, NULL,
				CONFIG_ADC_ADS1231_ASYNC_THREAD_INIT_PRIO,
				0, K_NO_WAIT);
	k_thread_name_set(tid, "adc_ads1231");
#endif
	adc_context_unlock_unconditionally(&data->ctx);

	return rc;
}

static const struct adc_driver_api api = {
	.channel_setup = ads1231_channel_setup,
	.read = ads1231_read,
	.ref_internal = ADS1231_REF_INTERNAL,
#ifdef CONFIG_ADC_ASYNC
	.read_async = ads1231_adc_read_async,
#endif
};
#define ADC_ADS1231_INST_DEFINE(n)							   \
	IF_ENABLED(CONFIG_ADC_ASYNC,							   \
		   (static								   \
		   K_KERNEL_STACK_DEFINE(thread_stack_##n,				   \
				      CONFIG_ADC_ADS1231_ACQUISITION_THREAD_STACK_SIZE);)) \
	static const struct ads1231_config config_##n = {				   \
		.bus = I2C_DT_SPEC_GET(DT_DRV_INST(n)),					   \
		IF_ENABLED(CONFIG_ADC_ASYNC, (.stack = thread_stack_##n))		   \
	};										   \
	static struct ads1231_data data_##n;						   \
	DEVICE_DT_INST_DEFINE(n, ads1231_init,						   \
		      NULL, &data_##n, &config_##n,					   \
		      POST_KERNEL, CONFIG_ADC_INIT_PRIORITY,				   \
		      &api);

DT_INST_FOREACH_STATUS_OKAY(ADC_ADS1231_INST_DEFINE);